library ieee;
use ieee.std_logic_1164.all;

entity fsm is
port(clk, reset: in std_logic;
		state_inputs: in std_logic_vector(0 to 1);
		comb_outputs: out std_logic_vector(0 to 1)
		);
end entity;

architecture bhv of fsm is
type states is (s0, s1, s2, s3);
signal present_state, next_state: states;
begin
	reg: process(reset, clk)
	begin
		if reset = '1' then
			present_state <= s0;
		elsif rising_edge(clk) then
			present_state <= next_state;
		end if;
	end process;
	transitions: process(present_state, state_inputs)
	begin
		case present_state is
			when s0 => 
				comb_outputs <= "00";
				if state_inputs = "11" then
					next_state <= s0;
				else
					next_state <= s1;
				end if;
			when s1 =>
				comb_outputs <= "01";
				if state_inputs = "11" then
					next_state <= s1;
				else
					next_state <= s2;
				end if;
			when s2 =>
				comb_outputs <= "10";
				if state_inputs = "11" then
					next_state <= s2;
				else
					next_state <= s3;
				end if;
			when s3 =>
				comb_outputs <= "11";
				if state_inputs = "11" then
					next_state <= s3;
				else
					next_state <= s0;
				end if;
		end case;
	end process;
end architecture;
