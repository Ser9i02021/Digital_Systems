library ieee;
use ieee.std_logic_1164.all;

entity fsm is
generic(N: positive := 2);
port(clk: in std_logic;
		input: in std_logic_vector(N - 1 downto 0);
		reset: in std_logic;
		output: out std_logic_vector(N - 1 downto 0)
		);
end entity;

architecture bhv of fsm is
type states is (s0, s1, s2, s3);
signal current_state, next_state: states;
begin
	--Next state logic
	NSL: process(current_state, input)
	begin
		next_state <= current_state;
		case current_state is
			when s0 =>
				if input = "11" then
					next_state <= s0;
				else
					next_state <= s1;
				end if;
			when s1 =>
				if input = "11" then
					next_state <= s1;
				else
					next_state <= s2;
				end if;
			when s2 =>
				if input = "11" then
					next_state <= s2;
				else
					next_state <= s3;
				end if;
			when s3 =>
				if input = "11" then
					next_state <= s3;
				else
					next_state <= s0;
				end if;
		end case;
	end process;
	--Memory element
	ME: process(clk, reset)
	begin
		if reset = '1' then
			current_state <= s0;
		elsif rising_edge(clk) then
			current_state <= next_state;
		end if;
	end process;
	--Output logic
	output <= "00" when current_state = s0 else
					"01" when current_state = s1 else
					"10" when current_state = s2 else
					"11";
end architecture;
