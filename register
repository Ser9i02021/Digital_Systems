library ieee;
use ieee.std_logic_1164.all;

entity register is
generic(N: positive := 8);
port(clk, load, reset: in std_logic;
		input: in std_logic_vector(N - 1 downto 0);
		output: out std_logic_vector(N - 1 downto 0)
		);
end entity;

architecture bhv of register is
subtype state is std_logic_vector(N - 1 downto 0);
signal currentState, nextState: state;
constant zero: std_logic_vector(N - 1 downto 0) := (others => '0');
begin
	--Next state logic
	nextState <= input when load = '1' else
										currentState;
	--Memory element
	process(clk, reset)
	begin
		if reset = '1' then
			currentState <= zero;
		elsif rising_edge(clk) then
			currentState <= nextState;
		end if;
	end process;
	--Ouput logic;
	output <= currentState;
end architecture;
